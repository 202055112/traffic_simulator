import pygame
import sys
import random

# Constants
WIDTH, HEIGHT = 800, 600
GRID_SIZE = 40
ROWS = HEIGHT // GRID_SIZE
COLS = WIDTH // GRID_SIZE
WHITE = (255, 255, 255)
GRAY = (200, 200, 200)
BLACK = (0, 0, 0)
ROAD_COLOR = (100, 100, 100)
CAR_COLOR = (0, 0, 255)
GREEN = (0, 255, 0)
RED = (255, 0, 0)

pygame.init()
screen = pygame.display.set_mode((WIDTH, HEIGHT))
pygame.display.set_caption("Traffic Simulator")
font = pygame.font.SysFont(None, 36)
clock = pygame.time.Clock()

# Global State
game_state = "menu"
car_crashed = False
intersections = []
cars = []
road_map = [[0 for _ in range(COLS)] for _ in range(ROWS)]

class Button:
    def __init__(self, text, x, y, w, h):
        self.rect = pygame.Rect(x, y, w, h)
        self.text = text

    def draw(self):
        pygame.draw.rect(screen, GRAY, self.rect)
        txt = font.render(self.text, True, BLACK)
        screen.blit(txt, (self.rect.x + 10, self.rect.y + 10))

    def is_clicked(self, pos):
        return self.rect.collidepoint(pos)

class TrafficLight:
    def __init__(self, x, y):
        self.x = x
        self.y = y
        self.state = "green"
        self.timer = 0
        self.interval = 180

    def update(self):
        self.timer += 1
        if self.timer > self.interval:
            self.timer = 0
            self.state = "green" if self.state == "red" else "red"

    def draw(self):
        color = GREEN if self.state == "green" else RED
        pygame.draw.circle(screen, color, (self.x, self.y), 10)

class Intersection:
    def __init__(self, row, col):
        self.row = row
        self.col = col
        self.x = col * GRID_SIZE + GRID_SIZE // 2
        self.y = row * GRID_SIZE + GRID_SIZE // 2
        self.light = TrafficLight(self.x, self.y)

    def update(self):
        self.light.update()

    def draw(self):
        self.light.draw()
        pygame.draw.rect(screen, BLACK, (self.col * GRID_SIZE, self.row * GRID_SIZE, GRID_SIZE, GRID_SIZE), 2)

class Car:
    def __init__(self, row, col, direction):
        self.row = row
        self.col = col
        self.direction = direction
        self.x = col * GRID_SIZE + 10
        self.y = row * GRID_SIZE + 10
        self.speed = 2
        self.waiting = False

    def move(self):
        next_row, next_col = self.row, self.col
        if self.direction == "right": next_col += 1
        elif self.direction == "left": next_col -= 1
        elif self.direction == "down": next_row += 1
        elif self.direction == "up": next_row -= 1

        # Check road bounds
        if 0 <= next_row < ROWS and 0 <= next_col < COLS:
            if road_map[next_row][next_col] == 1:
                self.row, self.col = next_row, next_col
                self.x = self.col * GRID_SIZE + 10
                self.y = self.row * GRID_SIZE + 10

    def draw(self):
        pygame.draw.rect(screen, CAR_COLOR, (self.x, self.y, 20, 20))

    def is_on_road(self):
        return 0 <= self.row < ROWS and 0 <= self.col < COLS and road_map[self.row][self.col] == 1

# Functions
def draw_grid():
    for i in range(ROWS):
        for j in range(COLS):
            color = ROAD_COLOR if road_map[i][j] == 1 else WHITE
            pygame.draw.rect(screen, color, (j * GRID_SIZE, i * GRID_SIZE, GRID_SIZE, GRID_SIZE))
            pygame.draw.rect(screen, GRAY, (j * GRID_SIZE, i * GRID_SIZE, GRID_SIZE, GRID_SIZE), 1)

def generate_intersections(n):
    global intersections, road_map
    intersections.clear()
    road_map = [[0 for _ in range(COLS)] for _ in range(ROWS)]
    for _ in range(n):
        row = random.randint(2, ROWS - 3)
        col = random.randint(2, COLS - 3)
        intersections.append(Intersection(row, col))
        for i in range(ROWS): road_map[i][col] = 1
        for j in range(COLS): road_map[row][j] = 1

def spawn_car():
    direction = random.choice(["up", "down", "left", "right"])
    if direction == "right":
        row = random.choice([i for i in range(ROWS) if road_map[i][0] == 1])
        return Car(row, 0, direction)
    elif direction == "left":
        row = random.choice([i for i in range(ROWS) if road_map[i][COLS-1] == 1])
        return Car(row, COLS-1, direction)
    elif direction == "down":
        col = random.choice([j for j in range(COLS) if road_map[0][j] == 1])
        return Car(0, col, direction)
    elif direction == "up":
        col = random.choice([j for j in range(COLS) if road_map[ROWS-1][j] == 1])
        return Car(ROWS-1, col, direction)

def reset_game():
    global cars, car_crashed
    cars.clear()
    car_crashed = False

def draw_text_center(text):
    txt = font.render(text, True, RED)
    screen.blit(txt, (WIDTH // 2 - txt.get_width() // 2, HEIGHT // 2 - txt.get_height() // 2))

# UI Elements
start_button = Button("Start", WIDTH // 2 - 50, HEIGHT // 2, 100, 50)
input_box = pygame.Rect(WIDTH // 2 - 50, HEIGHT // 2 + 60, 100, 40)
user_input = ""
spawn_timer = 0
spawn_interval = 40
paused = False

# Main Loop
while True:
    screen.fill(WHITE)
    for event in pygame.event.get():
        if event.type == pygame.QUIT:
            pygame.quit()
            sys.exit()
        if game_state == "menu" and event.type == pygame.MOUSEBUTTONDOWN:
            if start_button.is_clicked(event.pos):
                game_state = "input"
        elif game_state == "input" and event.type == pygame.KEYDOWN:
            if event.key == pygame.K_RETURN:
                if user_input.isdigit():
                    generate_intersections(int(user_input))
                    game_state = "play"
            elif event.key == pygame.K_BACKSPACE:
                user_input = user_input[:-1]
            else:
                user_input += event.unicode
        elif game_state == "play":
            if event.type == pygame.KEYDOWN:
                if event.key == pygame.K_SPACE:
                    paused = not paused
                if event.key == pygame.K_p:
                    game_state = "crash"
        elif game_state == "crash" and event.type == pygame.MOUSEBUTTONDOWN:
            game_state = "menu"
            reset_game()

    if game_state == "menu":
        draw_text_center("Traffic Simulator")
        start_button.draw()
    elif game_state == "input":
        draw_text_center("Number of intersections:")
        pygame.draw.rect(screen, GRAY, input_box)
        txt = font.render(user_input, True, BLACK)
        screen.blit(txt, (input_box.x + 10, input_box.y + 5))
    elif game_state == "play":
        draw_grid()
        for i in intersections:
            i.update()
            i.draw()
        if not paused:
            spawn_timer += 1
            if spawn_timer > spawn_interval:
                cars.append(spawn_car())
                spawn_timer = 0
        for car in cars:
            if not paused:
                car.move()
            if car.is_on_road():
                car.draw()
    elif game_state == "crash":
        draw_text_center("Car Crashed! Click to restart")

    pygame.display.flip()
    clock.tick(60)
