import pygame
import random
# pygame 서브모듈 초기화
pygame.init()

WIDTH, HEIGHT=800,600 #가로세로 픽셀
GRID_SIZE=40 # 한칸의 그리드 셀 크기를 40x40 픽셀
ROWS=HEIGHT//GRID_SIZE
COLS=WIDTH//GRID_SIZE # 행과 열 계산: 15x20의 격자 생성
WHITE=(255, 255, 255)
GRAY=(200, 200, 200)
BLACK=(0, 0, 0)
ROAD_COLOR=(100, 100, 100) #RGB 값 정의
CAR_COLOR = (0, 0, 255) 
GREEN = (0, 255, 0)
RED = (255, 0, 0)


# 디스플레이 세팅
screen=pygame.display.set_mode((WIDTH, HEIGHT)) #설정한 크기의 창 생성, screen이라는 변수에 저장
pygame.display.set_caption("Smart Traffic Simulator") #창 제목

# Clock
clock = pygame.time.Clock() #초당 프레임

# 길의 정의 (1 = road, 0 = empty)
# 하나의 교차로 예시
road_map=[[0 for _ in range(COLS)] for _ in range(ROWS)] #2차원 배열
for i in range(ROWS):
    road_map[i][5]=1  #6번째 열에 수직 도로
for j in range(COLS):
    road_map[7][j]=1  #8번째 행에 수평 도로

class Car:
    def __init__(self, x, y, direction="right"):
        self.x = x
        self.y = y
        self.direction = direction
        self.speed = 2
    #자동차 생성자: 기본 속도는 2px/frame

    def update(self):
        if self.direction == "right":
            self.x += self.speed
        elif self.direction == "down":
            self.y += self.speed
    #프레임마다 X나 y 좌표 갱신해서 이동

    def draw(self, surface):
        pygame.draw.rect(surface, CAR_COLOR, (self.x, self.y, GRID_SIZE // 2, GRID_SIZE // 2))
    #현재 좌표에 자동차를 그린다
class TrafficLight:
    def __init__(self, x, y):
        self.x = x
        self.y = y
        self.state = "green"
        self.timer = 0
        self.change_interval = 120  # 2 seconds at 60 fps

    def update(self):
        self.timer += 1
        if self.timer >= self.change_interval:
            self.timer = 0
            self.state = "red" if self.state == "green" else "green"
    #타이머가 120프레임(=2초)가 되면 신호를 전환
    def draw(self, surface):
        color = GREEN if self.state == "green" else RED
        pygame.draw.circle(surface, color, (self.x, self.y), 10)
    #현재 신호 상태에 따라 원을 그린다
class Intersection:
    def __init__(self, row, col):
        self.row = row
        self.col = col
        self.traffic_light = TrafficLight(col * GRID_SIZE + GRID_SIZE // 2, row * GRID_SIZE + GRID_SIZE // 2)

    def update(self):
        self.traffic_light.update()

    def draw(self, surface):
        self.traffic_light.draw(surface)

# 차랑 신호등 생성
cars = [Car(0, 7 * GRID_SIZE + 10, "right"),Car(5 * GRID_SIZE + 10, 0, "down"),]
#자동차 두 대를 수평 도로, 수직 도로에 각각 초기 위치로 배치
intersections = [Intersection(7, 5)]  # (row 7, col 5)
#교차점 하나 생성. (수평7, 수직5 지점)


# 그리드랑 도로 그리기
def draw_grid():
    for i in range(ROWS):
        for j in range(COLS):
            rect = pygame.Rect(j * GRID_SIZE, i * GRID_SIZE, GRID_SIZE, GRID_SIZE) # 각 격자의 사각형 생성, j=0,i=0일때 0,0에 40x40 사각형 생성
            if road_map[i][j] == 1:
                pygame.draw.rect(screen, ROAD_COLOR, rect) #셀이 1이면 도로(색칠)
            else:
                pygame.draw.rect(screen, WHITE, rect)
            pygame.draw.rect(screen, GRAY, rect, 1) #모든 셀 위에 회색 테두리를 얇게 그림

# Main loop
running = True
while running: #게임 상태 지속
    screen.fill(WHITE)
    for event in pygame.event.get():
        if event.type == pygame.QUIT:
            running = False #모든 이벤트를 확인하고 닫기 버튼 클릭시 종료

    draw_grid()
    #교차점의 신호등을 업데이트하고 화면에 그림
    for inter in intersections:
        inter.update()
        inter.draw(screen)
    #각 자동차의 위치를 업데이트하고 화면에 그림
    for car in cars:
        car.update()
        car.draw(screen)

    pygame.display.flip() #실제 화면으로 보여줌
    clock.tick(60) #초당 60초 프레임

pygame.quit()
