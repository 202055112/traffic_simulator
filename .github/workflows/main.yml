import pygame
import sys
import random

WIDTH, HEIGHT = 800, 600
GRID_SIZE = 40
ROWS = HEIGHT // GRID_SIZE
COLS = WIDTH // GRID_SIZE
WHITE = (255, 255, 255)
GRAY = (200, 200, 200)
BLACK = (0, 0, 0)
ROAD_COLOR = (100, 100, 100)
CAR_COLOR = (0, 0, 255)
GREEN = (0, 255, 0)
RED = (255, 0, 0)

pygame.init()
screen = pygame.display.set_mode((WIDTH, HEIGHT))
pygame.display.set_caption("Traffic Simulator")
font = pygame.font.SysFont(None, 36)
clock = pygame.time.Clock()

game_state = "menu"
car_crashed = False
intersections = []
cars = []
road_map = [[0 for _ in range(COLS)] for _ in range(ROWS)]
crash_enabled = False
spawn_timer = 0
spawn_interval = 60
paused = False
user_input = ""
collision_check_enabled = True

class Button:
    def __init__(self, text, x, y, w, h, toggle=False):
        self.rect = pygame.Rect(x, y, w, h)
        self.text = text
        self.toggle = toggle
        self.active = False

    def draw(self):
        color = (150, 255, 150) if self.active else GRAY
        pygame.draw.rect(screen, color, self.rect)
        txt = font.render(self.text, True, BLACK)
        screen.blit(txt, (self.rect.x + 5, self.rect.y + 5))

    def is_clicked(self, pos):
        return self.rect.collidepoint(pos)

    def update_toggle(self):
        if self.toggle:
            self.active = not self.active

class TrafficLight:
    def __init__(self, x, y):
        self.x = x
        self.y = y
        self.states = {'horizontal': 'green', 'vertical': 'red'}
        self.timer = 0
        self.interval = 180

    def update(self):
        self.timer += 1
        if self.timer > self.interval:
            self.timer = 0
            self.states['horizontal'], self.states['vertical'] = self.states['vertical'], self.states['horizontal']

    def get_state(self, direction):
        return self.states['horizontal'] if direction in ["left", "right"] else self.states['vertical']

    def draw(self):
        color_h = GREEN if self.states['horizontal'] == 'green' else RED
        color_v = GREEN if self.states['vertical'] == 'green' else RED
        pygame.draw.circle(screen, color_h, (self.x - 10, self.y), 6)
        pygame.draw.circle(screen, color_v, (self.x + 10, self.y), 6)

class Intersection:
    def __init__(self, row, col):
        self.row = row
        self.col = col
        self.x = col * GRID_SIZE + GRID_SIZE // 2
        self.y = row * GRID_SIZE + GRID_SIZE // 2
        self.light = TrafficLight(self.x, self.y)

    def update(self):
        self.light.update()

    def draw(self):
        self.light.draw()
        pygame.draw.rect(screen, BLACK, (self.col * GRID_SIZE, self.row * GRID_SIZE, GRID_SIZE, GRID_SIZE), 2)

    def get_light_state(self, direction):
        return self.light.get_state(direction)

class Car:
    def __init__(self, row, col, direction):
        self.row = row
        self.col = col
        self.direction = direction
        offset = 6 if direction in ["left", "up"] else 18
        self.x = col * GRID_SIZE + offset
        self.y = row * GRID_SIZE + offset
        self.width = 10
        self.height = 10
        self.speed = 1
        self.waiting = False

    def move(self):
        if self.at_intersection():
            light = self.get_light_state()
            if light == "red":
                if not self.inside_intersection():
                    self.waiting = True
                    return
            elif light == "green" and self.inside_intersection():
                self.speed = 2  # accelerate to get out
        self.waiting = False
        if self.direction == "right": self.x += self.speed
        elif self.direction == "left": self.x -= self.speed
        elif self.direction == "down": self.y += self.speed
        elif self.direction == "up": self.y -= self.speed

    def draw(self):
        if 0 <= self.x < WIDTH and 0 <= self.y < HEIGHT:
            pygame.draw.rect(screen, CAR_COLOR, (self.x, self.y, self.width, self.height))

    def is_off_screen(self):
        return not (0 <= self.x < WIDTH and 0 <= self.y < HEIGHT)

    def at_intersection(self):
        for i in intersections:
            if abs(self.x - i.x) < GRID_SIZE // 2 and abs(self.y - i.y) < GRID_SIZE // 2:
                return True
        return False

    def inside_intersection(self):
        for i in intersections:
            if abs(self.x - i.x) < 10 and abs(self.y - i.y) < 10:
                return True
        return False

    def get_light_state(self):
        for i in intersections:
            if abs(self.x - i.x) < GRID_SIZE // 2 and abs(self.y - i.y) < GRID_SIZE // 2:
                return i.get_light_state(self.direction)
        return "green"

def draw_grid():
    for i in range(ROWS):
        for j in range(COLS):
            color = ROAD_COLOR if road_map[i][j] == 1 else WHITE
            pygame.draw.rect(screen, color, (j * GRID_SIZE, i * GRID_SIZE, GRID_SIZE, GRID_SIZE))
            pygame.draw.rect(screen, GRAY, (j * GRID_SIZE, i * GRID_SIZE, GRID_SIZE, GRID_SIZE), 1)

def generate_intersections(n):
    global intersections, road_map
    intersections.clear()
    road_map = [[0 for _ in range(COLS)] for _ in range(ROWS)]
    for _ in range(n):
        row = random.randint(2, ROWS - 3)
        col = random.randint(2, COLS - 3)
        intersections.append(Intersection(row, col))
        for i in range(ROWS): road_map[i][col] = 1
        for j in range(COLS): road_map[row][j] = 1

def spawn_car():
    direction = random.choice(["up", "down", "left", "right"])
    if direction == "right":
        row = random.choice([i for i in range(ROWS) if road_map[i][0] == 1])
        return Car(row, 0, direction)
    elif direction == "left":
        row = random.choice([i for i in range(ROWS) if road_map[i][COLS - 1] == 1])
        return Car(row, COLS - 1, direction)
    elif direction == "down":
        col = random.choice([j for j in range(COLS) if road_map[0][j] == 1])
        return Car(0, col, direction)
    elif direction == "up":
        col = random.choice([j for j in range(COLS) if road_map[ROWS - 1][j] == 1])
        return Car(ROWS - 1, col, direction)

def reset_game():
    global cars, car_crashed
    cars.clear()
    car_crashed = False

def draw_text_center(text, y_offset=0):
    txt = font.render(text, True, RED)
    screen.blit(txt, (WIDTH // 2 - txt.get_width() // 2, HEIGHT // 2 - txt.get_height() // 2 + y_offset))

start_button = Button("Start", WIDTH // 2 - 50, HEIGHT // 2 + 40, 100, 50)
input_box = pygame.Rect(WIDTH // 2 - 50, HEIGHT // 2 + 100, 100, 40)
prevention_button = Button("Car Prevention: ON", 10, 10, 200, 40, toggle=True)

while True:
    screen.fill(WHITE)
    for event in pygame.event.get():
        if event.type == pygame.QUIT:
            pygame.quit()
            sys.exit()
        if game_state == "menu" and event.type == pygame.MOUSEBUTTONDOWN:
            if start_button.is_clicked(event.pos):
                game_state = "input"
        elif game_state == "input" and event.type == pygame.KEYDOWN:
            if event.key == pygame.K_RETURN:
                if user_input.isdigit():
                    generate_intersections(int(user_input))
                    game_state = "play"
            elif event.key == pygame.K_BACKSPACE:
                user_input = user_input[:-1]
            else:
                user_input += event.unicode
        elif game_state == "play":
            if event.type == pygame.KEYDOWN:
                if event.key == pygame.K_SPACE:
                    paused = not paused
                elif event.key == pygame.K_p:
                    crash_enabled = not crash_enabled
            elif event.type == pygame.MOUSEBUTTONDOWN:
                if prevention_button.is_clicked(event.pos):
                    prevention_button.update_toggle()
                    collision_check_enabled = prevention_button.active
                    prevention_button.text = "Car Prevention: ON" if prevention_button.active else "Car Prevention: OFF"
        elif game_state == "crash" and event.type == pygame.MOUSEBUTTONDOWN:
            game_state = "menu"
            reset_game()

    if game_state == "menu":
        draw_text_center("Traffic Simulator", -40)
        start_button.draw()
    elif game_state == "input":
        draw_text_center("Number of intersections:", -40)
        pygame.draw.rect(screen, GRAY, input_box)
        txt = font.render(user_input, True, BLACK)
        screen.blit(txt, (input_box.x + 10, input_box.y + 5))
    elif game_state == "play":
        draw_grid()
        prevention_button.draw()
        for i in intersections:
            i.update()
            i.draw()
        if not paused:
            spawn_timer += 1
            if spawn_timer > spawn_interval:
                cars.append(spawn_car())
                spawn_timer = 0
        new_cars = []
        for i, car in enumerate(cars):
            if not paused:
                car.move()
            if crash_enabled:
                for other in cars[i+1:]:
                    if abs(car.x - other.x) < car.width and abs(car.y - other.y) < car.height:
                        game_state = "crash"
            if collision_check_enabled:
                for other in cars:
                    if other != car and abs(car.x - other.x) < 15 and abs(car.y - other.y) < 15:
                        break
                else:
                    new_cars.append(car)
            else:
                new_cars.append(car)
            car.draw()
        cars = [c for c in new_cars if not c.is_off_screen()]
    elif game_state == "crash":
        draw_text_center("Car Crashed! Click to restart")

    pygame.display.flip()
    clock.tick(60)
